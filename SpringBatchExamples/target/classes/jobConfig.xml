<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:batch="http://www.springframework.org/schema/batch" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:util = "http://www.springframework.org/schema/util" 
 xsi:schemaLocation="http://www.springframework.org/schema/batch   
 http://www.springframework.org/schema/batch/spring-batch-2.2.xsd   
 http://www.springframework.org/schema/beans    
 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
 http://www.springframework.org/schema/util     
      http://www.springframework.org/schema/util/spring-util-3.0.xsd  ">
    <import resource="context.xml" />      
   <!-- Defining a bean --> 
   <bean id = "itemProcessor" class = "com.trizetto.training.processors.ClaimProcessor" /> 
   <bean id = "jobListener" class = "com.trizetto.training.listeners.ClaimJobListener" /> 
   <bean id="chunkListener" class="com.trizetto.training.listeners.ClaimChunkListener"></bean>
   <bean id="stepListener" class="com.trizetto.training.listeners.ClaimStepListener"></bean>
   
   <batch:job id = "claimJob">
   	  <batch:listeners>
      	 <batch:listener ref="jobListener"></batch:listener>
      </batch:listeners> 
      <batch:step id = "step1" next ="step2"> 
         <batch:tasklet>           
            <batch:chunk reader = "xmlItemReader" writer = "mysqlItemWriter" processor = "itemProcessor" commit-interval="2">
            <batch:listeners>
            	<batch:listener ref="chunkListener"></batch:listener>
            </batch:listeners>
            </batch:chunk>
         </batch:tasklet> 
      <batch:listeners>
      	<batch:listener ref="stepListener"></batch:listener>
      </batch:listeners>
      </batch:step>
      
      <batch:step id = "step2"> 
         <batch:tasklet>           
            <batch:chunk reader = "databaseItemReader" writer = "flatFileItemWriter" commit-interval="2">
            <batch:listeners>
            	<batch:listener ref="chunkListener"></batch:listener>
            </batch:listeners>
            </batch:chunk>
         </batch:tasklet> 
      <batch:listeners>
      	<batch:listener ref="stepListener"></batch:listener>
      </batch:listeners>
      </batch:step> 
   </batch:job> 
   
   
   <batch:job id = "pagingclaimJob">
   	  <batch:step id = "pagingstep"> 
         <batch:tasklet>           
            <batch:chunk reader = "dbpagingitemReader" writer = "flatFileItemWriter" commit-interval="2">
            <batch:listeners>
            	<batch:listener ref="chunkListener"></batch:listener>
            </batch:listeners>
            </batch:chunk>
         </batch:tasklet> 
      <batch:listeners>
      	<batch:listener ref="stepListener"></batch:listener>
      </batch:listeners>
      </batch:step> 
   </batch:job> 
   
   
   <bean id="dbpagingitemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">
        <property name="dataSource" ref="dataSource" />
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="dataSource" />
                <property name="selectClause" value="select CLAIM_ID, DOC, AMOUNT, POLICYHOLDER_NAME" />
                <property name="fromClause" value="from CLAIM_DATA" /> 
                <property name="whereClause" value= "where CLAIM_ID=:claim_id"/>
                <property name="sortKey" value="amount" />
            </bean>
        </property>
        <property name="parameterValues">
        	<map>
        		<entry key="claim_id" value="#{jobParameters['id']}"></entry>
        	</map>
        </property>
        <property name="pageSize" value="10" />
        <property name="rowMapper">
            <bean class="com.trizetto.training.mapper.ClaimRowMapper" />
        </property>
    </bean>
   
   <bean id="databaseItemReader"
        class="org.springframework.batch.item.database.JdbcCursorItemReader">
 
        <property name="dataSource" ref="dataSource" />
 
        <property name="sql"
            value="SELECT CLAIM_ID, DOC, AMOUNT, POLICYHOLDER_NAME FROM CLAIM_DATA" />
 
        <property name="rowMapper">
            <bean class="com.trizetto.training.mapper.ClaimRowMapper" />
        </property>
 
    </bean>
   <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
        scope="step">
 
        <property name="resource" value="file:csv/paging/claimFile.txt" />
 
        <property name="lineAggregator">
 
            <!-- An Aggregator which converts an object into delimited list of strings -->
            <bean
                class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
 
                <property name="delimiter" value=", " />
 
                <property name="fieldExtractor">
 
                    <!-- Extractor which returns the value of beans property through reflection -->
                    <bean
                        class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="claim_id, doc, amount, policyholder_name" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
   
                
   <bean id = "xmlItemReader" 
      class = "org.springframework.batch.item.xml.StaxEventItemReader"> 
      <property name = "fragmentRootElementName" value = "claim" /> 
      <property name = "resource" value = "claim.xml" /> 
      <property name = "unmarshaller" ref = "customUnMarshaller" /> 
   </bean> 
      
   <bean id = "customUnMarshaller" class = "org.springframework.oxm.xstream.XStreamMarshaller">
      <property name = "aliases"> 
         <util:map id = "aliases"> 
            <entry key = "claim" value = "com.trizetto.training.model.Claim" />            
         </util:map> 
      </property> 
   </bean>  
   <bean id = "mysqlItemWriter" class = "org.springframework.batch.item.database.JdbcBatchItemWriter"> 
      <property name = "dataSource" ref = "dataSource" /> 
      <property name = "sql"> 
         <value> 
            <![CDATA[insert into claim_data values (:claim_id, :doc, :amount, :policyholder_name
               );]]>
         </value> 
      </property>   
      
      <property name = "itemSqlParameterSourceProvider"> 
         <bean class = "org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" /> 
      </property> 
   </bean> 
</beans>